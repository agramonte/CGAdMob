/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "CGAdMob_autodefs.h"
#include "s3eEdk.h"
#include "CGAdMob.h"
//Declarations of Init and Term functions
extern s3eResult CGAdMobInit();
extern void CGAdMobTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void InitAdView_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: InitAdView"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)InitAdView, 0);
}

static s3eResult ShowInterstitialAd_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: ShowInterstitialAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)ShowInterstitialAd, 0);
}

static void SetGoogleAppKey_wrap(const char* bannerAdUnitId, const char* interstatialAdUnitId)
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: SetGoogleAppKey"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)SetGoogleAppKey, 2, bannerAdUnitId, interstatialAdUnitId);
}

static void BannerAdLoad_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: BannerAdLoad"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)BannerAdLoad, 0);
}

static void BannerAdShow_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: BannerAdShow"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)BannerAdShow, 0);
}

static void BannerAdHide_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: BannerAdHide"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)BannerAdHide, 0);
}

static void IsLandscape_wrap(bool landscape)
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: IsLandscape"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)IsLandscape, 1, landscape);
}

static void BannerAdPosition_wrap(CGAdMobPosition position)
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: BannerAdPosition"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)BannerAdPosition, 1, position);
}

static void BannerAdSize_wrap(CGAdMobBannerAdSize size)
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: BannerAdSize"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)BannerAdSize, 1, size);
}

static void TestDeviceHashedId_wrap(const char* deviceHashId)
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: TestDeviceHashedId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)TestDeviceHashedId, 1, deviceHashId);
}

static void Release_wrap()
{
    IwTrace(CGADMOB_VERBOSE, ("calling CGAdMob func on main thread: Release"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Release, 0);
}

#define InitAdView InitAdView_wrap
#define ShowInterstitialAd ShowInterstitialAd_wrap
#define SetGoogleAppKey SetGoogleAppKey_wrap
#define BannerAdLoad BannerAdLoad_wrap
#define BannerAdShow BannerAdShow_wrap
#define BannerAdHide BannerAdHide_wrap
#define IsLandscape IsLandscape_wrap
#define BannerAdPosition BannerAdPosition_wrap
#define BannerAdSize BannerAdSize_wrap
#define TestDeviceHashedId TestDeviceHashedId_wrap
#define Release Release_wrap

#endif

s3eResult CGAdMobRegister(CGAdMobCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_CGADMOB_HASH, CGADMOB_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult CGAdMobUnRegister(CGAdMobCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_CGADMOB_HASH, CGADMOB_CALLBACK_MAX, cbid, fn);
}

void CGAdMobRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[13];
    funcPtrs[0] = (void*)CGAdMobRegister;
    funcPtrs[1] = (void*)CGAdMobUnRegister;
    funcPtrs[2] = (void*)InitAdView;
    funcPtrs[3] = (void*)ShowInterstitialAd;
    funcPtrs[4] = (void*)SetGoogleAppKey;
    funcPtrs[5] = (void*)BannerAdLoad;
    funcPtrs[6] = (void*)BannerAdShow;
    funcPtrs[7] = (void*)BannerAdHide;
    funcPtrs[8] = (void*)IsLandscape;
    funcPtrs[9] = (void*)BannerAdPosition;
    funcPtrs[10] = (void*)BannerAdSize;
    funcPtrs[11] = (void*)TestDeviceHashedId;
    funcPtrs[12] = (void*)Release;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[13] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("CGAdMob", funcPtrs, sizeof(funcPtrs), flags, CGAdMobInit, CGAdMobTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int CGAdMobStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&CGAdMobRegisterExt;
    return 0;
}

int g_CGAdMobVal = CGAdMobStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    CGAdMobRegisterExt();
}
#endif

#endif
